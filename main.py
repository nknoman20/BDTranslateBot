import os
import logging
from telegram import Update
from telegram.ext import Updater, MessageHandler, Filters, CallbackContext
from googletrans import Translator

# Logging ‡¶ö‡¶æ‡¶≤‡ßÅ
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

translator = Translator()

def translate(update: Update, context: CallbackContext) -> None:
    text = update.message.text
    # Detect language
    detected = translator.detect(text).lang
    # Decide target: ‡¶á‡¶Ç‡¶∞‡¶ø‡¶∂ ‡¶π‡¶≤‡ßá ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ‡ßü, ‡¶®‡¶æ ‡¶π‡¶≤‡ßá ‡¶á‡¶Ç‡¶∞‡ßá‡¶ú‡¶ø‡¶§‡ßá
    target = 'bn' if detected == 'en' else 'en'
    try:
        translated = translator.translate(text, dest=target).text
        update.message.reply_text(f"üîÑ {translated}")
    except Exception as e:
        logger.error(f"Translation error: {e}")
        update.message.reply_text("‚ùå ‡¶Ö‡¶®‡ßÅ‡¶¨‡¶æ‡¶¶ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶õ‡¶ø ‡¶®‡¶æ, ‡¶™‡¶∞‡ßá ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§")

def main():
    # BOT_TOKEN environment variable ‡¶•‡ßá‡¶ï‡ßá ‡¶™‡ßú‡¶¨‡ßá
    TOKEN = os.getenv("BOT_TOKEN")
    if not TOKEN:
        raise ValueError("BOT_TOKEN environment variable ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®‡•§")

    updater = Updater(TOKEN, use_context=True)
    dp = updater.dispatcher
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, translate))

    logger.info("Bot is starting...")
    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()
